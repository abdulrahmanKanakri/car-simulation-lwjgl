#version 400 core

in vec2 pass_textureCoordinates;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;

out vec4 out_Color;

uniform sampler2D backgroundTexture;
uniform sampler2D rGroundTexture;
uniform sampler2D gGroundTexture;
uniform sampler2D bGroundTexture;
uniform sampler2D blandMap;

uniform vec3 lightColour;
uniform float shineDamper;
uniform float reflectivity;

void main(void){

    vec4 blendMapColor = texture(blandMap, pass_textureCoordinates);

    float backTextureAmount = 1 - (blendMapColor.r + blendMapColor.g + blendMapColor.b);
    vec2 tiledCoords = pass_textureCoordinates * 40.0;
    vec4 backgroundTextureColor = texture(backgroundTexture, tiledCoords) * backTextureAmount;
    vec4 rGroundTextureColor = texture(rGroundTexture, tiledCoords) * blendMapColor.r;
    vec4 gGroundTextureColor = texture(gGroundTexture, tiledCoords) * blendMapColor.g;
    vec4 bGroundTextureColor = texture(bGroundTexture, tiledCoords) * blendMapColor.b;

    vec4 total = backgroundTextureColor+ rGroundTextureColor+ gGroundTextureColor+ bGroundTextureColor;

	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);
	
	float nDotl = dot(unitNormal,unitLightVector);
	float brightness = max(nDotl,0.2);
	vec3 diffuse = brightness * lightColour;
	
	vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 lightDirection = -unitLightVector;
	vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
	
	float specularFactor = dot(reflectedLightDirection , unitVectorToCamera);
	specularFactor = max(specularFactor,0.0);
	float dampedFactor = pow(specularFactor,shineDamper);
	vec3 finalSpecular = dampedFactor * reflectivity * lightColour;
	

	out_Color =  vec4(diffuse,1.0) * total + vec4(finalSpecular,1.0);

}